#include "tests.h"
#include <bhr/qed_lagrangian.h>

namespace bhr {

// WARNING: Testing no-autodiff version only!
bool test_magnetic_only_lagrangian__base(void) {
  static const double result1[] = {
    0,
    2.209767712765143459226203033471468686928e-6,
    0.00003479913956501210483807698384747257749407,
    0.0001719995554092233910845525398066271648850,
    0.0005276604936057509282422264735745128044441,
    0.001245522966215737452747006423886023902629,
    0.002490682146648687541481592982641424942547,
    0.004442843694825284838336465433562409840281,
    0.007291243342230317918967880319026964138510,
    0.01123090202345043590212019547073625403576,
    0.01645989388092008862209527999950242950321,
    0.02317736435575313569924282944964302391721,
    0.03158209882178848610712262556402579326749,
    0.04187149455801418125329721346627768241020,
    0.05424082865535277879973957072585855412025,
    0.06888274367998742450899678296810438015817,
    0.08598689407590924026636856128124434858948,
    0.1057397115487943502296165887551236507622,
    0.1283242586907212598002145804706021973153,
    0.1539201480916379920668874630164159645100,
    0.1827035100041952091756331058730821049594,
    0.2148469958967570754681339614247633026668,
    0.2505198083789733173219108021115417866914,
    0.2898877503229871239453891338314594994523,
    0.3331132877504223983889047843372493101707,
    0.3803556223678490120408966313580635343408,
    0.4317707706247572943391058031485537958508,
    0.4875116469204199123725274822096083238461,
    0.5477281491594757203289410592582021008489,
    0.6125672452948420039739355343475159405946,
    0.6821730598333766295228766842076445366282,
    0.7566869595389509749638679745540594348889,
    0.8362476377675296557427974220383069590868,
    0.9209911970232547693025470437444656747280,
    1.011051229443835444449809088700223999594,
    1.106558895015695086393975862121547808972,
    1.207642997390410507466882573272918271696,
    1.314430057228664050557209026525580400112,
    1.427044383039830471220477054347402667545,
    1.545608139517231095619455877697846493356,
    1.670241413393183282012047759093896658766,
    1.801062276855950213697323507208377503706,
    1.938186848583882294973103511586712619332,
    2.081729352461478674943468396333095124696,
    2.231802174048604962768345538535530058296,
    2.388515914878326603340480399566825907014,
    2.551979444661266194678150535499019642128,
    2.722299951475469917511205894910348619869,
    2.899582990020791696550444677804172493056,
    3.083932528016025718832822262169352552510,
    3.275450990815637868116626856151607365324,
    3.474239304321122126047100556609241267955,
    3.680396936259863506608969221544607075744,
    3.894021935902022705984245976096174560494,
    4.115210972283446416371333324888495473343,
    4.344059371000011455487102379726371761881,
    4.580661149636177413251862376801899031421,
    4.825109051887887649385824832377815439680,
    5.077494580437349910125029760740185375370,
    5.337908028634666499076117496461007336638,
    5.606438511038785359628860779513117271141,
    5.883173992867818829831551013255051071022,
    6.168201318406434033224066225132969941263,
    6.461606238415762996467627792007521366806,
    6.763473436589114644627955600844212686873,
    7.073886555094696169628888416000333780809,
    7.392928219244567963707559736617641187834,
    7.720680061327163437579389525195174118977,
    8.057222743638900934147033003215874490616,
    8.402635980748697377694735748446406596442,
    8.756998561027559636194760400046274162852,
    9.120388367473876908815315595498395574958,
    9.492882397863562684380186199763467548846,
    9.874556784252794742340448791174287956886,
    10.26548681185977302915969996309409257809,
    10.66574693735065478034255159903110604619,
    11.07541080655363074513416586262658707852,
    11.49455127162397264102950174553083438076,
    11.92324040768180693326447224924203846094,
    12.36154952894335071064101840248762812681,
    12.80954920436537892960424494105022808678,
    13.26730927282177585256107026641545279258,
    13.73489885783015446006107007611200677779,
    14.21238638184570343449039102751685449849,
    14.69983958013863957910559370551143142396,
    15.19732551427090195200108243059602000489,
    15.70491058518702037687901937844025608768,
    16.22266054593342327067862216399107626299,
    16.75064051401981594057319297807663596539,
    17.28891498343565879292554718464056506302,
    17.83754783633420350870283016295676110929,
    18.39660235439600251427723210219037695112,
    18.96614122988329144624757676872787879374,
    19.54622657639615429434181030991891847397,
    20.13691993934091511133194866116690329468,
    20.73828230612075728595091046208564688759,
    21.35037411605815014162041468816573553788,
    21.97325527005826187875076918899406414803,
    22.60698514002215651672794679891404162752,
    23.25162257801820947189700785303598199233,
    23.90722592521983074791248753531120042547
  };
  if (!evaluate_and_compare(
        [](int i) { return i * 0.1; },
        [](double x) { return magnetic_only_lagrangian__base(x); },
        result1,
        sizeof(result1) / sizeof(result1[0]),
        1e-10)) {
    return false;
  }

  static const double result2[] = {
    0,
    0.01645989388092008862209527999950242950321,
    0.1827035100041952091756331058730821049594,
    0.6821730598333766295228766842076445366282,
    1.670241413393183282012047759093896658766,
    3.275450990815637868116626856151607365324,
    5.606438511038785359628860779513117271141,
    8.756998561027559636194760400046274162852,
    12.80954920436537892960424494105022808678,
    17.83754783633420350870283016295676110929,
    23.90722592521983074791248753531120042547,
    31.07887098038092116535280849629007228099,
    39.40779839319872050867170571934382403969,
    48.94510467313813221452513620535631877332,
    59.73826255388065333555859773340006444684,
    71.83159906505986097997971480115691722587,
    85.26668521803705944657923007270647785572,
    100.0826577400144919501292563856843537453,
    116.3164877335466323665789046172960051831,
    134.0032072929942089166987062830035738465,
    153.1761023936117974502001119945881540815,
    173.8668784152357053925324242852319855988,
    196.1058032334149981133077803262725474937,
    219.9218317494739321154090990553615070961,
    245.3427149318055257284279430280698338051,
    272.3950958312712047345671269392374725610,
    301.1045945634517543469242362596806033132,
    331.4958838839400988282477605240275245578,
    363.5927566942471239955674867165689153511,
    397.4181865865631163262005125534190501219,
    432.9943823518568835972056268960609205423,
    470.3428372273887934959951585985977148430,
    509.4843735389815000849731635090205449471,
    550.4391832944996373954227738397571023661,
    593.2268652034667773791133360435784231600,
    637.8664585301391961837360221874783566884,
    684.3764741309694079642891535550052862982,
    732.7749229801147600750546784191148236117,
    783.0793424468069634114440099139218033627,
    835.3068205546676157478479664290224757154,
    889.4740184243676380811753045282033095753,
    945.5971910765270590017814477590671917341,
    1003.692206750740500123581232161955508253,
    1063.774564878526644942862018579713621983,
    1125.859412832373134137043932631444596089,
    1189.961561559500112986084792472015019588,
    1256.095500197180606192749098290175440784,
    1324.275409756172088120964063152167772944,
    1394.515175949812656599753530304242145550,
    1466.828401238434268820813464413693315933,
    1541.228416151790898893720376225760295809,
    1617.728289946061612178297313883299106782,
    1696.340840646557699025499614187922384667,
    1777.078644522445971774175163759338303633,
    1859.954045035517682703792519657316325063,
    1944.979161301216374222864570763536789067,
    2032.165896096730112652090742590593937976,
    2121.525943447903924995371038174793477938,
    2213.070795823993687512950282613780568038,
    2306.811750966825881943871259865657243796,
    2402.759918378716184177448229150272394761,
    2500.926225491505661814819578649174640682,
    2601.321423537271934761564055073367430259,
    2703.956093139642606105711377395442939706,
    2808.840649643160878354006171699740312176,
    2915.985348196812112764652768579284416853,
    3025.400288606600734754768898732545964070,
    3137.095419970956624901475485059841818049,
    3251.080545111737745172865884875655846169,
    3367.365324812671315007392719280356886354,
    3485.959281876230585219134634736369759704,
    3606.871805009170361844180689052304268742,
    3730.112152546234974798695268091256744258,
    3855.689456020901194301098584666558484474,
    3983.612723591420164813696902602777583223,
    4113.890843329871831953371218210041567272,
    4246.532586381438179944247364878051203492,
    4381.546610000633930237036055395235240002,
    4518.941460470801634690576310401784036437,
    4658.725575912779146271762666972803096484,
    4800.907288988278401665079449333324219330,
    4945.494829503172721290331902096709697601,
    5092.496326915573092517930550036773779866,
    5241.919812753280045300379769630781341633,
    5393.773222944924850379571453310032565515,
    5548.064400068860142270981521028669620209,
    5704.801095523624126433350290439852476141,
    5863.990971623582850360593814405713281817,
    6025.641603623150308921413286498439304053,
    6189.760481672795238392988845050521884270,
    6356.355012709865259087408355333378271139,
    6525.432522287092575249585233800900774940,
    6697.000256341489839998973498480624074244,
    6871.065382906199226250229373001082236927,
    7047.634993767721464960932438215943501057,
    7226.716106070823935750765355844042286763,
    7408.315663873307194913227647786727180532,
    7592.440539652697026777085011274554482476,
    7779.097535766823677888087249468456667276,
    7968.293385870150893863970979084331522727,
    8160.034756287624279155186703055418321434
  };

  if (!evaluate_and_compare(
        [](int i) { return (double)i; },
        [](double x) { return magnetic_only_lagrangian__base(x); },
        result2,
        sizeof(result2) / sizeof(result2[0]),
        1e-10)) {
    return false;
  }
  return true;
}


bool test_qed_metric_correction_lambda__low_limit(void) {
  for (int k = 0; k < 100; ++k) {
    double F = random_double(0.0, 1e-6 * sqr(PHY_Bc));
    double G = 0.0;
    if (!compare_eq_rel(magnetic_only_lagrangian(F, G),
                        QED::lagrangian_lowest_order(F, G),
                        2e-6, 0.)) {
      return false;
    }
  }

  for (int k = 0; k < 100; ++k) {
    // Low-limit.
    double F = random_double(0.0, 1e-6 * sqr(PHY_Bc));
    double G = random_double(0.0, 1e-6 * sqr(PHY_Bc));
    F = 1e-6 * sqr(PHY_Bc);
    G = 1e-6 * sqr(PHY_Bc);
    std::pair<double, double> lambdas = qed_metric_correction_lambda(
        [](auto F, auto G) { return QED::lagrangian_lowest_order(F, G); },
        F, G);
    if (!compare_eq_rel(lambdas.first, QED::lambda1, 1e-9, 0.)) return false;
    if (!compare_eq_rel(lambdas.second, QED::lambda2, 1e-9, 0.)) return false;
  }

  // DISABLED because we can't calculate derivatives of magnetic-only
  // lagrangian.
  // for (int i = 0; i < 100; ++i) {
  //   double F = random_double(0.0, 0.01 * sqr(PHY_Bc));
  //   double G = 0.0;
  //   auto lambdas1 = qed_metric_correction_lambda(
  //       [](auto F, auto G) { return lagrangian_lowest_order(F, G); }, F, G);
  //   auto lambdas2 = qed_metric_correction_lambda(
  //       [](auto F, auto G) { return magnetic_only_lagrangian(F, G); }, F, G);
  //   if (!compare_eq_rel(lambdas1.first, lambdas2.first, 1e-5)) return false;
  //   if (!compare_eq_rel(lambdas1.second, lambdas2.second, 1e-5)) return false;
  // }

  return true;
}


// bool test_qed_metric_correction(void) {
//   /* Compare geodesic_acceleration__magnetic_field__lowest_order with the
//    * general geodesic_acceleration__magnetic_field. */
//   using namespace QED;
//
//   auto metric_ll_func = [&spacetime](auto position) {
//     return spacetime.get_metric_ll(position);
//   };
//   auto metric_uu_func = [&wdpacetime](auto position) {
//     return spacetime.get_metric_uu(position);
//   };
//   auto potential_func = [](auto position) {
//     return {0, 0, 0, 0};
//   };
//
//   FlatSpacetime spacetime;
//   result1 = geodesic_acceleration__magnetic_field__lower_order(
//       metric_ll_func,
//       metric_uu_func,
//       potential_l_func,
//       position,
//       direction
//   );
//   result2 = geodesic_acceleration__magnetic_field(
//       lagrangian_lowest_order
//
//
// }

// bool test_qed_metric_correction(void) {
//   if (!_test_qed_metric_correction__flat()) return false;
//   return true;
// }

}  // namespace bhr
